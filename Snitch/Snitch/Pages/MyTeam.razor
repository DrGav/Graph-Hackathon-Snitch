@page "/myteam"
@using Microsoft.Graph

@inject Snitch.GraphServices.GraphClientFactory clientFactory

<AuthorizeView>
    <Authorized>
        <div class="card col-sm-8">
            <div class="card-header">
                Direct Reports
            </div>

            <div class="card-body">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th scope="col">Id</th>
                            <th scope="col">Name</th>
                            <th scope="col">Email</th>
                            <th scope="col">Monitoring</th>
                            <th scope="col">Status change</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var u in allUsers)
                        {
                            <tr>
                                <td>@u.Id</td>
                                <td>@u.DisplayName</td>
                                <td>@u.Mail</td>
                                <td class="text-center"><input class="form-check-input" type="checkbox" /></td>
                                <td class="text-center"><button @onclick="@(e => ChangeStatus(u.Id))">Change Status</button></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <RedirectToLogin />
    </NotAuthorized>
</AuthorizeView>

@code {

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    private IList<User> allUsers = new List<User>();

    private string status = string.Empty;
    private bool isError;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationStateTask == null)
        {
            throw new AuthenticationException(new Error
                {
                    Message = "Unable to access authentication state"
                });
        }

        var graphClient = clientFactory.GetAuthenticatedClient();

        try
        {
            var users = await graphClient.Me.DirectReports.Request()
                              .Select("displayName,mail,givenName,surname,id")
                              .GetAsync();


            while (users.Count > 0)
            {
                foreach (var u in users)
                {
                    allUsers.Add((User)u);
                }
                if (users.NextPageRequest != null)
                {
                    users = await users.NextPageRequest
                        .GetAsync();
                }
                else
                {
                    break;
                }
            }
        }
        catch (ServiceException exception)
        {
            isError = true;
            status = exception.Message;
        }
    }

    private async Task ChangeStatus(string userId)
    {
        var graphClient = clientFactory.GetAuthenticatedClient();

        await graphClient.Users[userId].Presence.SetPresence("Available", "Available", "d1e40049-b2cd-4d88-99d7-6a68ced05b29", new Duration("PT1H"))
                                                .Request()
                                                .PostAsync();

    }
}
