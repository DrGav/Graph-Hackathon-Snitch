@page "/myteam"
@using Microsoft.Graph
@using Snitch.DTOs;

@inject Snitch.GraphServices.GraphClientFactory clientFactory

<AuthorizeView>
    <Authorized>
        <div class="card col-sm-10">
            <div class="card-header">
                Direct Reports
            </div>

            <div class="card-body">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th scope="col">Name</th>
                            <th scope="col">Email</th>
                            <th scope="col">Monitoring</th>
                            <th>Available</th>
                            <th>Away</th>
                            <th>Busy</th>
                            <th>Do Not Disturb</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var u in MonitoringUsers)
                        {
                            <tr>
                                <td>@u.DisplayName</td>
                                <td>@u.Email</td>
                                <td class="text-center"><input class="form-check-input" type="checkbox" @bind-value=u.Monitoring /></td>
                                <td class="text-center">@u.AvailableMinutes</td>
                                <td class="text-center">@u.AwayMinutes</td>
                                <td class="text-center">@u.BusyMinutes</td>
                                <td class="text-center">@u.DoNotDisturbMinutes</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <RedirectToLogin />
    </NotAuthorized>
</AuthorizeView>

@code {

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    private IList<User> allUsers = new List<User>();
    private IList<UserMonitorDTO> MonitoringUsers = new List<UserMonitorDTO>();

    private string status = string.Empty;
    private bool isError;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationStateTask == null)
        {
            throw new AuthenticationException(new Error
                {
                    Message = "Unable to access authentication state"
                });
        }

        var graphClient = clientFactory.GetAuthenticatedClient();

        try
        {
            var users = await graphClient.Me.DirectReports.Request()
                              .Select("displayName,mail,givenName,surname,id")
                              .GetAsync();


            while (users.Count > 0)
            {
                foreach (var u in users)
                {
                    allUsers.Add((User)u);
                }
                if (users.NextPageRequest != null)
                {
                    users = await users.NextPageRequest
                        .GetAsync();
                }
                else
                {
                    break;
                }
            }

            foreach(var u in allUsers)
            {
                var newUser = new UserMonitorDTO
                {
                    UserId = u.Id,
                    DisplayName = u.DisplayName,
                    Email = u.Mail,
                    Monitoring = false,
                    AvailableMinutes = 0,
                    AwayMinutes = 0,
                    BusyMinutes = 0,
                    DoNotDisturbMinutes = 0
                };

                MonitoringUsers.Add(newUser);
            }

            StartMonitor();

        }
        catch (ServiceException exception)
        {
            isError = true;
            status = exception.Message;
        }
    }

    private void SetMonitor(string userId)
    {
        MonitoringUsers.Where(u => u.UserId == userId).FirstOrDefault().Monitoring = !MonitoringUsers.Where(u => u.UserId == userId).FirstOrDefault().Monitoring;
    }

    private async Task StartMonitor()
    {
        var graphClient = clientFactory.GetAuthenticatedClient();

        while (true)
        {
            foreach(var user in MonitoringUsers)
            {
                if (user.Monitoring)
                {
                    var presence = await graphClient.Users[user.UserId].Presence.Request().GetAsync();

                    switch (presence.Availability)
                    {
                        case "Available":
                            user.AvailableMinutes = user.AvailableMinutes++;
                            break;
                        case "Busy":
                            user.BusyMinutes = user.BusyMinutes++;
                            break;
                        case "Away":
                            user.AwayMinutes = user.AwayMinutes + 1;
                            break;
                        case "DoNotDisturb":
                            user.DoNotDisturbMinutes = user.DoNotDisturbMinutes++;
                            break;
                    }
                }
            }
            
            await Task.Delay(5000);
            StateHasChanged();
        }
    }
}
